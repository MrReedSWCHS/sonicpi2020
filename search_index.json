[
["index.html", "Sonic Pi 1 Introduction 1.1 Help me! 1.2 Install 1.3 If you’re on a Mac…", " Sonic Pi Cambridge Faculty of Education Workshops 2020 1 Introduction This is an introduction to Sonic Pi, the free, open-source Music software. The menu pages on the left are written consecutively. The actual content of this website takes 30 mins ish, plus time for you to experiment. We will meet again at 10am on 17th June to discuss next steps, philosophy and Q+A 1.1 Help me! I’m live on Zoom chat if there’s an issue. And there’s a lovely tutorial in the program itself. 1.2 Install Please install now so that you can try it out as we go: https://sonic-pi.net Sonic Pi runs on Mac, Windows and Linux, but unfortunately not tablets/mobiles. 1.3 If you’re on a Mac… Since it’s not authorised through the App Store, installing can be a bit of a pain. You might have to open System Preferences and open Security and Privacy. Towards the bottom of this window, you should be able to click on Open Anyway. You should only have to do this the first time you run the software. "],
["start-here.html", "2 Start here 2.1 Sam Aaron 2.2 Shape of You 2.3 MIDI Notes", " 2 Start here Watch this video for an introduction to the software. 2.1 Sam Aaron The first 2:30 of this video are a great explanation. All of Sam’s youtube videos are excellent. 2.2 Shape of You Try to program Shape of You for 5 mins It starts with: play 61 2.3 MIDI Notes Here’s a list of MIDI note numbers to help you convert from notes to numbers: "],
["note-names.html", "3 Note Names 3.1 Options and release: 3.2 Note names 3.3 Note names", " 3 Note Names Experiment using these code improvements for 5 mins 3.1 Options and release: Use amp: to change the volume (amp: 1 is default) play :cs5, amp: 1.5 Use release to change the release portion of the synth envelope (how long the note lasts). play :cs5, release: 0.2 3.2 Note names play 61 is equal to play :cs4 Sharp = s Flat = f E.g. :cs5 and :ef3 3.3 Note names Here are the note names again "],
["repetition.html", "4 Repetition 4.1 Looping 4.2 x.times 4.3 loop 4.4 play_pattern_timed 4.5 Chords", " 4 Repetition 4.1 Looping You can loop a block of code like this: loop do play 70 sleep 1 end The do and end act like brackets. They enclose code blocks in many situations. Here is a composition by some pupils a few years ago. 4.2 x.times 3.times do play 70 sleep 1 end You can nest do/end blocks: 3.times do play 70 sleep 1 5.times do play 71 sleep 1 end end Notice there are two ends because there are two dos, like pairs of brackets. 4.3 loop A simple loop block: loop do play 70 sleep 1 end 4.4 play_pattern_timed use_bpm 40 play_pattern_timed [:cs4, :e4, :cs4], [0.3, 0.3, 0.2], release: 0.2 4.5 Chords play [:cs5, :e5, :gs5] is the same as: play chord(:cs5, :minor) "],
["samples.html", "5 Samples 5.1 Race for Space 5.2 Cover versions", " 5 Samples Type sample and when you press spacebar, the list of samples will appear. 5.1 Race for Space In past years I have set this ‘Race for Space’ video as a composition project. It’s short but with lots of musical implications. 5.1.1 Stimulus 5.1.2 Example compositions 5.2 Cover versions I did find the Shape of You! It’s brilliant. The code is here. Perhaps you can have a go at tidying it up and using some play_pattern_timed and other strategies to make it more readable or flexible? Here’s another cover version from a few years back. "],
["what-next.html", "6 What next? 6.1 Links", " 6 What next? 6.1 Links My Sonic Pi resource, in progress MeHackIt Sonic Pi Tutorial "],
["live-session.html", "7 Live session 7.1 Concurrency 7.2 Rings 7.3 Beat making 7.4 Beat splicing 7.5 Links", " 7 Live session 17th June, 10am. 7.1 Concurrency 7.1.1 at Give specific timings for threads (in a do/end block) at 1 do sample :bd_mehackit end at 2 do sample :drum_snare_hard end at 2.5 do sample :drum_cymbal_closed end Or, play at multiple times using an array at [1, 2, 4] do play 75 end 7.1.2 in_thread in_thread causes that thread to run at the same time as the next thread. in_thread do loop do play 70 sleep 1 end end loop do play 80 sleep 1 end 7.1.3 live_loop live_loop is more powerful than in_thread. You do have to give the loop a name, e.g. :name. Every time you run the code, the loop will be updated. This means you can play it live as an instrument. live_loop :name do play 70 sleep 1 end 7.2 Rings You can play a chord by listing several notes with square brackets and commas: play [:c4, :e4, :g4] You can play one note after the other by ‘ticking’ through it: loop do play [:c4, :e4, :g4].tick sleep 0.5 end Each loop causes the tick to increase. This can be useful for creating beats too… 7.3 Beat making 7.3.1 Ring I can tick through a ring This means each time the loop repeats, a different value is used I can use the amp: option at 0 for no beat and 1 for a beat Or use more subtle numbers for accents and ghost notes?!! ♫♪ use_bpm 100 live_loop :beat do sample :bd_mehackit, amp: [1,0,1,0,1,1,0,1,0,1,0,1,1,0,1,1].tick sample :drum_snare_hard, amp: [0,0,0,0,0.75,0,0,1].look sleep 0.25 end If you want to refer to the tick multiple times you must use .look instead. This is because the .tick doesn’t just use the tick, it increases the tick by 1. You don’t want it to increase more than once every loop (I imagine). 7.3.2 Variables Typing out those numbers each time is a pain. Let’s define a variable. r1 = [1,0,1,0,1,1,0,1,0,1,0,1,1,0,1,1] use_bpm 100 live_loop :beat do sample :bd_mehackit, amp: r1.tick sleep 0.25 end Here, the variable r1 is defined as the list of 0s and 1s. You can now use r1 in several places without typing it all again. Or perhaps define a series of rhythms at the top of your code for easy access and live manipulation. 7.3.3 Randomisation If you can use a ring with amp:, why even bother making a rhythm? Let’s go random. rrand(x, y) spits out a random number between x and y rrand_i(x, y) spits out a random integer (whole number) between x and y rand() outputs a random number between 0 and 1. Perfect for the amp: option. sample :drum_cymbal_closed, amp: rrand(0.1, 0.4) 7.3.4 Probability Random, but with a greater probability of certain outcomes. So maybe a closed hi-hat is more likely than an open hi-hat, but you’re never quite sure where the open is going to come (and this time not just because the drummer can’t count). 7.4 Beat splicing 7.4.1 Getting the loop right There are some great sample loops in Sonic Pi.1 Use sleep sample_duration to loop the sample exactly when it’s over. live_loop :drums do sample :loop_amen sleep sample_duration :loop_amen end This isn’t very musical. Use the sample beat_stretch: option to fit it to an exact number of beats. It’s useful if you know how long the loop is in advance. :loop_amen is 4 beats long. use_bpm 120 live_loop :drums do sample :loop_amen, beat_stretch: 4 sleep 4 end 7.4.2 slice: This video is a great example: Use the sample slice: option to play one 1/16th slice of the sample. (By default, the sample is split into 16 equal parts, but you can change that too using the num_slices: option) live_loop :drums do sample :loop_amen, slice: 0 sleep 0.5 end Pick specific slices: live_loop :drums do sample :loop_amen, slice: [0,4,6,7].choose sleep 0.125 end or even random slices using live_loop :drums do sample :loop_amen, slice: choose sleep 0.125 end 7.4.3 onset: Even better, Sonic Pi has transient detection. This works out where the drum hits are by analysing the wave. So onset: 0 should be the first hit, then onset: 1 the next, then onset: 2 after that, etc. use_bpm 150 live_loop :jungle do sample :loop_amen, onset: choose sleep 0.5 end 7.5 Links Great drum slicing examples By the way, the sample command has its own in-built compressor, envelope, LPF, HPF, filter envelope, pitch and tempo stretching, slicing and transient detection.↩ "]
]
